 1)api for fetching token 
     
     url:http://127.0.0.1:8000/api/token/

     method:POST

     body:{username,password}

     authentication:Nill


schema:Customer

attributes:   

          [
          name,
          email,
          phone,
          vehicle_number,
          running_km,
          technician,
          status,
          created_date,
          update_date,
          is_active,
          ]

 2)api for listing all customers 
     
     url:http://127.0.0.1:8000/api/customers/

     method:get

     body:Nil

     authentication:Token

         

 3)api for adding customer
     
     url:http://127.0.0.1:8000/api/customers/

     method:POST

     body:{name,
          email,
          phone,
          vehicle_number,
          running_km,}

     authentication:Token     

 
 4)api for retrieving customers details
     
     url:http://127.0.0.1:8000/api/customers/

     method:get

     body:Nil

     authentication:Token
     

 
 5)api for updating customers details
     
     url:http://127.0.0.1:8000/api/customers/

     method:put

     body:{name,
          email,
          phone,
          vehicle_number,
          running_km,}

     authentication:Token       



 6)api for deleting customer
     
     url:http://127.0.0.1:8000/api/customers/

     method:DELETE

     body:Nil

     authentication:Token   




7) api for adding a work

     url:http://127.0.0.1:8000/api/customer/{id}/add_work

     method :POST

     body:{title,description,amount}


8)api for adding work

   urls:http://127.0.0.1:8000/api/customer/{id}/add_work

   method:POST

   body:{title,description,amount}


#rest_framework>generics.py
        # class createapiview

#class WorkCreateView(CreateAPIView):    

#    serializer_class=WorkSerializer

#    def perform_create(self,serializer):

#        id=self.kwargs.get("pk")

#        customer_instance=Customer.objects.get(id=id)

 #       serializer.save(customer=customer_instance)






  @action(method=["post"],detail=True)
    def add_work(self,request,*args,**kwargs):

        id=kwargs.get("pk")

        customer_instance=Customer.objects.get(id=id)

        serializer=WorkSerializer(data=request.data)

        if serializer.is_valid():

            serializer.save(Customer=customer_instance)

            return Response(data=serializer.data)
        
        else:

            return Response(data=serializer.errors)